metadata <- FetchData(seurat_obj, vars = c("condition", "seurat_cluster"))
metadata <- FetchData(seurat_obj, vars = c("condition", "seurat_clusters"))
metadata
countCommonClusterCells <- function(x){
control_count <- nrow(metadata[which(metadata$condition == "Young" & metadata$seurat_clusters == x[["Young"]]), ])
aged_count <- nrow(metadata[which(metadata$condition == "Aged" & metadata$seurat_clusters == x[["Aged"]]), ])
return(control_count + aged_count)
}
common_cluster_counts <- apply(top_hits, 1, countCommonClusterCells)
common_cluster_counts
top_hits$Counts <- common_cluster_counts
top_hits
top_hits$Common <- 1:nrow(top_hits)
top_hits
metadata$cluster <- "Common_0"
for (n in 1:nrow(top_hits)){
x <- top_hits[n, ]
control_cluster <- x$Young
aged_cluster <- x$Aged
new_cluster <- paste0("Common_", x$Common)
metadata[which(metadata$condition == "Young" & metadata$seurat_clusters == control_cluster), "cluster"] <- new_cluster
metadata[which(metadata$condition == "Aged" & metadata$seurat_clusters == aged_cluster), "cluster"] <- new_cluster
}
metadata
exclusive_clusters <- subset(metadata, metadata$cluster == "Common_0")
exclusive_clusters
unique_cluster_counts <- exclusive_clusters %>% group_by(condition, seurat_clusters) %>% summarize(Counts = n())
unique_cluster_counts
unique_cluster_counts$cluster <- NULL
unique_cluster_counts %>% group_by(condition) %>% arrange(Counts)
unique_cluster_counts %>% group_by(condition) %>% arrange(desc(Counts))
unique_cluster_counts %>% group_by(condition)
unique_cluster_counts
unique_cluster_counts %>% arrange(desc(Counts))
unique_cluster_counts %>% arrange(desc(Counts), .by_group = TRUE)
unique_cluster_counts <- unique_cluster_counts %>% arrange(desc(Counts), .by_group = TRUE)
unique_cluster_counts
unique_cluster_counts
unique_cluster_counts %>% tibble::rowid_to_column("cluster")
unique_cluster_counts %>% tibble::rowid_to_column("cluster", .by_group = TRUE)
unique_cluster_counts %>% mutate(cluster = row_number(), .by_group = TRUE)
unique_cluster_counts %>% mutate(cluster = row_number())
unique_cluster_counts %>% mutate(cluster = row_number() - 1)
unique_cluster_counts <- unique_cluster_counts %>% mutate(cluster = row_number() - 1)
unique_cluster_counts
paste0(unique_cluster_counts$condition, "_", unique_cluster_counts$cluster)
unique_cluster_counts$cluster <- paste0(unique_cluster_counts$condition, "_", unique_cluster_counts$cluster)
unique_cluster_counts
for (n in 1:nrow(unique_cluster_counts)){
x <- unique_cluster_counts[n, ]
metadata[which(metadata$condition ==  x[["condition"]] & metadata$seurat_clusters == x[["seurat_clusters"]]), "cluster"] <- paste0(x[["condition"]], "_", x[["cluster"]])
}
metadata
metadata <- FetchData(seurat_obj, vars = c("condition", "seurat_cluster"))
metadata <- FetchData(seurat_obj, vars = c("condition", "seurat_clusters"))
metadata$cluster <- "Common_0"
# Assign clusters for each row
for (n in 1:nrow(top_hits)){
x <- top_hits[n, ]
control_cluster <- x$Young
aged_cluster <- x$Aged
new_cluster <- paste0("Common_", x$Common)
metadata[which(metadata$condition == "Young" & metadata$seurat_clusters == control_cluster), "cluster"] <- new_cluster
metadata[which(metadata$condition == "Aged" & metadata$seurat_clusters == aged_cluster), "cluster"] <- new_cluster
}
metadata
# If cluster == Common_0, create alternative labels
exclusive_clusters <- subset(metadata, metadata$cluster == "Common_0")
unique_cluster_counts
left_join(metadata, unique_cluster_counts, by = c("condition", "seurat_clusters"))
for (n in 1:nrow(unique_cluster_counts)){
x <- unique_cluster_counts[n, ]
metadata[which(metadata$condition ==  x[["condition"]] & metadata$seurat_clusters == x[["seurat_clusters"]]), "cluster"] <- x[["cluster"]]
}
metadata
cluster_counts <- as.data.frame(table(metadata$cluster))
colnames(cluster_counts) <- c("Cluster", "Cells")
print(cluster_counts)
seurat_obj[["cluster"]] <- metadata$cluster
Idents(seurat_obj) <- "cluster"
cluster_counts
Idents(seurat_obj)
DimPlot(seurat_obj, reduction = "umap", group.by = "cluster", label = TRUE)
saveRDS(seurat_obj, "H9_RPE_Integrated_AllResiduals.rds")
print(cluster_counts)
library(monocle3)
library(Seurat)
library(tidyverse)
colour_df <- read_csv("~/Documents/Experiments/RPE_scRNA/Analysis/RevisedAnalysis/cluster_colours.csv")
colour_df$Cluster <- factor(colour_df$Cluster, levels = c(paste0("Young_", as.character(0:5)),
paste0("Aged_", as.character(0:5)),
paste0("Common_", as.character(1:6)))
colour_vec <- as.character(colour_df$Colour)
names(colour_vec) <- as.character(colour_df$Cluster)
colour_df <- read_csv("~/Documents/Experiments/RPE_scRNA/Analysis/RevisedAnalysis/cluster_colours.csv")
colour_df$Cluster <- factor(colour_df$Cluster, levels = c(paste0("Young_", as.character(0:5)),
paste0("Aged_", as.character(0:5)),
paste0("Common_", as.character(1:6)))
)
colour_vec <- as.character(colour_df$Colour)
names(colour_vec) <- as.character(colour_df$Cluster)
library(monocle3)
library(Seurat)
library(tidyverse)
# Read in analysed object
#seurat_obj <- readRDS("/Volumes/LACIE/RPE_scRNA/PUBLISHED/H9_RPE_IntegratedObject.rds")
seurat_obj <- readRDS("H9_RPE_Integrated_AllResiduals.rds")
metadata <- FetchData(seurat_obj, c("condition", "cluster", "seurat_clusters",
"nCount_RNA", "nFeature_RNA", "percent.mt",
"percent.rb"))
metadata
colnames(metadata)[2] <- "cluster_identity"
table(metadata$cluster_identity)
metadata$cluster_identity <- factor(metadata$cluster_identity, levels = c(
paste0("Common", as.character(1:6)),
paste0("Young", as.character(0:5)),
paste0("Aged", as.character(0:5))
))
metadata$cluster_identity
metadata <- FetchData(seurat_obj, c("condition", "cluster", "seurat_clusters",
"nCount_RNA", "nFeature_RNA", "percent.mt",
"percent.rb"))
metadata
metadata$cluster
metadata$cluster_identity <- factor(metadata$cluster, levels = c(
paste0("Common", "_", as.character(1:6)),
paste0("Young", "_", as.character(0:5)),
paste0("Aged", "_", as.character(0:5))
))
metadata$cluster <- factor(metadata$cluster, levels = c(
paste0("Common", "_", as.character(1:6)),
paste0("Young", "_", as.character(0:5)),
paste0("Aged", "_", as.character(0:5))
))
metadata$cluster
metadata$Months <- metadata$condition
metadata$Months <- metadata$condition
metadata$Months[metadata$Months == "Young"] <- "1"
metadata$Months[metadata$Months == "Aged"] <- "12"
metadata$Months <- factor(metadata$Months, levels = c("1", "12"))
metadata
seurat_obj[["cluster"]] <- metadata$cluster
seurat_obj[["Months"]] <- metadata$Months
Idents(seurat_obj) <- "cluster"
saveRDS(seurat_obj, "/Volumes/LACIE/RPE_scRNA/H9_RPE_Integrated_AllResiduals.rds")
colnames(metadata)[2] <- "cluster_identity"
metadata
counts <- seurat_obj[["integrated"]]@scale.data
dim(counts)
?SelectIntegrationFeatures
?FindIntegrationAnchors
?IntegrateData
?FindVariableFeatures
library(Seurat)
library(tidyverse)
library(ggpubr)
library(ComplexHeatmap)
# Load objects
control_obj <- readRDS("/Volumes/LACIE/RPE_scRNA/REVISED_ANALYSIS/H9_RPE_1_MONTH_AllResiduals.rds")
aged_obj <- readRDS("/Volumes/LACIE/RPE_scRNA/REVISED_ANALYSIS/H9_RPE_12_MONTH_AllResiduals.rds")
#control_obj <- readRDS("/Volumes/LACIE/RPE_scRNA/PUBLISHED/H9_RPE_YOUNG_Analysed_Object.rds")
#aged_obj <- readRDS("/Volumes/LACIE/RPE_scRNA/PUBLISHED/H9_RPE_AGED_Analysed_Object.rds")
# Set resolution
control_obj[["seurat_clusters"]] <- control_obj[["SCT_snn_res.0.6"]]
Idents(control_obj) <- "seurat_clusters"
aged_obj[["seurat_clusters"]] <- aged_obj[["SCT_snn_res.0.7"]]
Idents(aged_obj) <- "seurat_clusters"
control_obj
dim(control_obj)
cocontrol_obj
control_obj@meta.data[1:10,]
control_obj[["seurat_clusters"]] <- control_obj[["SCT_snn_res.0.6"]]
control_obj[["condition"]] <- "Young"
Idents(control_obj) <- "seurat_clusters"
aged_obj[["seurat_clusters"]] <- aged_obj[["SCT_snn_res.0.7"]]
aged_obj[["condition"]] <- "Aged"
Idents(aged_obj) <- "seurat_clusters"
options(future.globals.maxSize = 1600 * 1024^3)
intersect(rownames(control_obj), rownames(aged_obj))
gene_list <- intersect(rownames(control_obj), rownames(aged_obj))
object_list <- list(Control = control_obj, Aged = aged_obj)
# Edit globals because we need these for some reason
options(future.globals.maxSize = 1600 * 1024^3)
gene_list <- intersect(rownames(control_obj), rownames(aged_obj))
object_list <- list(Control = control_obj, Aged = aged_obj)
common_features <- SelectIntegrationFeatures(object.list = object_list, nfeatures = 3000)
common_features <- SelectIntegrationFeatures(object.list = object_list, nfeatures = 3000)
object_list <- PrepSCTIntegration(object.list = object_list, anchor.features = common_features, verbose = FALSE)
object_anchors <- FindIntegrationAnchors(object.list = object_list, normalization.method = "SCT", anchor.features = common_features, verbose = FALSE)
seurat_obj <- IntegrateData(anchorset = object_anchors,
normalization.method = "SCT",
features.to.integrate = all_features,
verbose = FALSE)
seurat_obj <- IntegrateData(anchorset = object_anchors,
normalization.method = "SCT",
features.to.integrate = gene_list,
verbose = FALSE)
library(Seurat)
library(tidyverse)
library(ggpubr)
library(ComplexHeatmap)
# Load objects
control_obj <- readRDS("/Volumes/LACIE/RPE_scRNA/PUBLISHED/H9_RPE_YOUNG_Analysed_Object.rds")
aged_obj <- readRDS("/Volumes/LACIE/RPE_scRNA/PUBLISHED/H9_RPE_AGED_Analysed_Object.rds")
# Set resolution
control_obj[["seurat_clusters"]] <- control_obj[["SCT_snn_res.0.6"]]
control_obj[["condition"]] <- "Young"
Idents(control_obj) <- "seurat_clusters"
aged_obj[["seurat_clusters"]] <- aged_obj[["SCT_snn_res.0.7"]]
aged_obj[["condition"]] <- "Aged"
Idents(aged_obj) <- "seurat_clusters"
# Extract cluster data from Seurat objects
control_metadata <- FetchData(control_obj, vars = c("condition", "seurat_clusters"))
aged_metadata <- FetchData(aged_obj, vars = c("condition", "seurat_clusters"))
# Tabulate cluster counts
control_cluster_counts <- as.data.frame(table(control_metadata$seurat_clusters))
aged_cluster_counts <- as.data.frame(table(aged_metadata$seurat_clusters))
# Combine cluster counts
cluster_counts <- left_join(control_cluster_counts, aged_cluster_counts, by = "Var1")
colnames(cluster_counts) <- c("Cluster", "Control", "Aged")
cluster_counts
# Edit globals because we need these for some reason
options(future.globals.maxSize = 1600 * 1024^3)
gene_list <- intersect(rownames(control_obj), rownames(aged_obj))
object_list <- list(Control = control_obj, Aged = aged_obj)
common_features <- SelectIntegrationFeatures(object.list = object_list, nfeatures = 3000)
object_list <- PrepSCTIntegration(object.list = object_list, anchor.features = common_features, verbose = FALSE)
object_anchors <- FindIntegrationAnchors(object.list = object_list, normalization.method = "SCT", anchor.features = common_features, verbose = FALSE)
seurat_obj <- IntegrateData(anchorset = object_anchors,
normalization.method = "SCT",
verbose = FALSE)
# Dimensionality reduction
seurat_obj <- RunPCA(seurat_obj, verbose = FALSE)
seurat_obj <- RunUMAP(seurat_obj, dims = 1:30, seed.use = 1)
# Generate UMAP plots and label by cluster and condition to ensure
# integration hasn't introduced any batch effects
plots <- DimPlot(seurat_obj, group.by = "seurat_clusters", split.by = "condition", combine = FALSE)
plots <- lapply(X = plots, FUN = function(x) x + theme(legend.position = "top") + guides(color = guide_legend(nrow = 3,
byrow = TRUE, override.aes = list(size = 2))))
batch_plot <- DimPlot(seurat_obj, group.by = "condition") + ggtitle("Age")
plots[[2]] <- batch_plot
CombinePlots(plots)
library(MetaNeighbor)
library(SingleCellExperiment)
# Prepare data for conversion to SingleCellExperiment
metadata <- FetchData(seurat_obj, vars = c("orig.ident", "condition", "seurat_clusters"))
metadata$cluster <- paste0(metadata$condition, "_", metadata$seurat_clusters)
seurat_obj[["cluster"]] <- metadata$cluster
sce_obj <- as.SingleCellExperiment(seurat_obj)
# Run unsupervised metaneighbor based on top variable genes
variable_genes <- variableGenes(sce_obj, exp_labels = sce_obj$condition)
celltype_nv = MetaNeighborUS(var_genes = variable_genes,
dat = sce_obj,
study_id = sce_obj$condition,
cell_type = sce_obj$seurat_clusters, fast_version = TRUE)
# Plot metaneighbor AUC values as a heatmap
cols = rev(colorRampPalette(RColorBrewer::brewer.pal(11,"RdYlBu"))(100))
breaks = seq(0, 1, length=101)
auroc_matrix <- celltype_nv[paste0("Aged|", as.character(0:11)),
paste0("Young|", as.character(0:11))]
auroc_plot <- Heatmap(auroc_matrix, col = cols, name = "AUROC",
rect_gp = gpar(col = "white", lwd = 2))
draw(auroc_plot)
# Integrate clusters
celltype_df <- as.data.frame(celltype_nv)
celltype_df$ref_cluster <- rownames(celltype_df)
celltype_df <- celltype_df %>% gather(cluster, AUROC, -ref_cluster)
# Remove equal clusters
diff_clusters <- subset(celltype_df, celltype_df$ref_cluster != celltype_df$cluster)
# Separate clusters
diff_clusters <- subset(diff_clusters, startsWith(diff_clusters$ref_cluster, "Young"))
diff_clusters <- subset(diff_clusters, startsWith(diff_clusters$cluster, "Aged"))
# Select clusters that have AUROC of 0.9
top_hits <- topHits(cell_NV = celltype_nv,
dat = sce_obj,
study_id = sce_obj$condition,
cell_type = sce_obj$seurat_clusters,
threshold = 0.9)
print(top_hits)
top_hits <- top_hits %>% filter(Match_type == "Reciprocal_top_hit" &
Mean_AUROC > 0.8)
top_hits <- top_hits %>% mutate(Common = 1:nrow(top_hits))
colnames(top_hits) <- c("Young", "Aged", "Mean_AUROC", "Match_type", "Common")
top_hits$Young <- gsub("^Young[|]", "", top_hits$Young)
top_hits$Aged <- gsub("^Aged[|]", "", top_hits$Aged)
print(top_hits)
# Extract metadata
metadata <- FetchData(seurat_obj, vars = c("condition", "seurat_clusters"))
# Need to tally cell counts so we can figure out which cluster is the largest,
# and then count them accordingly
countCommonClusterCells <- function(x){
control_count <- nrow(metadata[which(metadata$condition == "Young" & metadata$seurat_clusters == x[["Young"]]), ])
aged_count <- nrow(metadata[which(metadata$condition == "Aged" & metadata$seurat_clusters == x[["Aged"]]), ])
return(control_count + aged_count)
}
common_cluster_counts <- apply(top_hits, 1, countCommonClusterCells)
top_hits$Counts <- common_cluster_counts
top_hits$Common <- 1:nrow(top_hits)
# Add column
metadata$cluster <- "Common_0"
# Assign clusters for each row
for (n in 1:nrow(top_hits)){
x <- top_hits[n, ]
control_cluster <- x$Young
aged_cluster <- x$Aged
new_cluster <- paste0("Common_", x$Common)
metadata[which(metadata$condition == "Young" & metadata$seurat_clusters == control_cluster), "cluster"] <- new_cluster
metadata[which(metadata$condition == "Aged" & metadata$seurat_clusters == aged_cluster), "cluster"] <- new_cluster
}
# If cluster == Common_0, create alternative labels
exclusive_clusters <- subset(metadata, metadata$cluster == "Common_0")
# Count clusters by condition
unique_cluster_counts <- exclusive_clusters %>% group_by(condition, seurat_clusters) %>% summarize(Counts = n())
# Preserve cluster 0
unique_cluster_counts$cluster <- NULL
# Number rows accordingly
unique_cluster_counts <- unique_cluster_counts %>% mutate(cluster = row_number() - 1)
# Create new column label
unique_cluster_counts$cluster <- paste0(unique_cluster_counts$condition, "_", unique_cluster_counts$cluster)
for (n in 1:nrow(unique_cluster_counts)){
x <- unique_cluster_counts[n, ]
metadata[which(metadata$condition ==  x[["condition"]] & metadata$seurat_clusters == x[["seurat_clusters"]]), "cluster"] <- x[["cluster"]]
}
# Final cluster counts
cluster_counts <- as.data.frame(table(metadata$cluster))
colnames(cluster_counts) <- c("Cluster", "Cells")
print(cluster_counts)
seurat_obj[["cluster"]] <- metadata$cluster
Idents(seurat_obj) <- "cluster"
library(monocle3)
library(Seurat)
library(tidyverse)
colour_df <- read_csv("~/Documents/Experiments/RPE_scRNA/Analysis/RevisedAnalysis/cluster_colours.csv")
colour_df$Cluster <- factor(colour_df$Cluster, levels = c(paste0("Young_", as.character(0:5)),
paste0("Aged_", as.character(0:5)),
paste0("Common_", as.character(1:6)))
)
colour_vec <- as.character(colour_df$Colour)
names(colour_vec) <- as.character(colour_df$Cluster)
seurat_obj <- readRDS("/Volumes/LACIE/RPE_scRNA/PUBLISHED/H9_RPE_IntegratedObject.rds")
library(Seurat)
library(monocle3)
library(SingleCellExperiment)
library(tidyverse)
library(ggpubr)
# Load integrated object
seurat_obj <- readRDS("/Volumes/LACIE/RPE_scRNA/PUBLISHED/H9_RPE_IntegratedObject.rds")
# Load colours for clusters
colour_df <- read_csv("~/Documents/Experiments/RPE_scRNA/Analysis/RevisedAnalysis/cluster_colours.csv")
seurat_obj
seurat_obj@meta.data[1:10,]
metadata <- FetchData(seurat_obj, c("condition", "cluster", "seurat_clusters",
"nCount_RNA", "nFeature_RNA", "percent.mt",
"percent.rb"))
metadata
# Retrieve residuals from integrated slot
counts <- seurat_obj[["integrated"]]@scale.data
# Retrieve metadata
metadata <- FetchData(seurat_obj, c("condition", "Months", "cluster",
"seurat_clusters",
"nCount_RNA",
"nFeature_RNA",
"percent.mt",
"percent.rb"))
colnames(metadata)[3] <- "cluster_identity"
# Create gene dataframe
gene_annotation <- data.frame(gene_short_name = rownames(raw_data),
num_cells_expressed =
Matrix::rowSums(raw_data > 0),
row.names = rownames(raw_data))
# Retrieve residuals from integrated slot
counts <- seurat_obj[["integrated"]]@scale.data
# Retrieve metadata
metadata <- FetchData(seurat_obj, c("condition", "Months", "cluster",
"seurat_clusters",
"nCount_RNA",
"nFeature_RNA",
"percent.mt",
"percent.rb"))
colnames(metadata)[3] <- "cluster_identity"
# Create gene dataframe
gene_annotation <- data.frame(gene_short_name = rownames(counts),
num_cells_expressed =
Matrix::rowSums(counts > 0),
row.names = rownames(counts))
# Create CDS monocle object
cds <- new_cell_data_set(counts,
cell_metadata = metadata,
gene_metadata = gene_annotation)
cds <- preprocess_cds(cds, num_dim = 30, norm_method = "none", scaling = FALSE)
plot_pc_variance_explained(cds)
cds <- reduce_dimension(cds, max_components = 2, reduction_method = "UMAP",
cores = 1, preprocess_method = "PCA", verbose = FALSE)
plot_cells(cds, reduction_method = "UMAP",
color_cells_by = "Months",
show_trajectory_graph = FALSE)
cds <- cluster_cells(cds)
cds <- learn_graph(cds)
cluster_monocle <- plot_cells(cds, reduction_method = "UMAP",
color_cells_by = "cluster",
show_trajectory_graph = TRUE)
partition_monocle <- plot_cells(cds, reduction = "UMAP",
color_cells_by = "partition",
show_trajectory_graph = TRUE)
cluster_seurat <- plot_cells(cds, reduction = "UMAP",
color_cells_by = "cluster_identity",
show_trajectory_graph = TRUE)
ggarrange(cluster_monocle, partition_monocle, cluster_seurat, ncol = 3)
plot_cells(cds, reduction_method = "UMAP",
color_cells_by = "Months",
show_trajectory_graph = FALSE) +
scale_color_manual(name = "Months", values = c("1" = "#e71837",
"12" = "#00674f")) +
ggtitle("Timepoint", subtitle = "Monocle 3 UMAP")
cluster_monocle <- plot_cells(cds, reduction_method = "UMAP",
color_cells_by = "cluster",
show_trajectory_graph = TRUE) +
ggtitle("Monocle 3 Clusters", subtitle = "Monocle 3 Trajectory Analysis")
partition_monocle <- plot_cells(cds, reduction = "UMAP",
color_cells_by = "partition",
show_trajectory_graph = TRUE) +
ggtitle("Partitions", subtitle = "Monocle 3 Trajectory Analysis")
cluster_seurat <- plot_cells(cds, reduction = "UMAP",
color_cells_by = "cluster_identity",
show_trajectory_graph = TRUE) +
scale_colour_manual(name = "Cluster", values = colour_vec) +
ggtitle("Clusters", subtitle = "Monocle 3 Trajectory Analysis")
ggarrange(cluster_monocle, partition_monocle, cluster_seurat, ncol = 3)
# Load integrated object
seurat_obj <- readRDS("/Volumes/LACIE/RPE_scRNA/PUBLISHED/H9_RPE_IntegratedObject.rds")
# Load colours for clusters
colour_df <- read_csv("~/Documents/Experiments/RPE_scRNA/Analysis/RevisedAnalysis/cluster_colours.csv")
colour_vec <- as.character(colour_df$Colour)
names(colour_vec) <- as.character(colour_df$Cluster)
cluster_monocle <- plot_cells(cds, reduction_method = "UMAP",
color_cells_by = "cluster",
show_trajectory_graph = TRUE) +
ggtitle("Monocle 3 Clusters", subtitle = "Monocle 3 Trajectory Analysis")
partition_monocle <- plot_cells(cds, reduction = "UMAP",
color_cells_by = "partition",
show_trajectory_graph = TRUE) +
ggtitle("Partitions", subtitle = "Monocle 3 Trajectory Analysis")
cluster_seurat <- plot_cells(cds, reduction = "UMAP",
color_cells_by = "cluster_identity",
show_trajectory_graph = TRUE) +
scale_colour_manual(name = "Cluster", values = colour_vec) +
ggtitle("Clusters", subtitle = "Monocle 3 Trajectory Analysis")
ggarrange(cluster_monocle, partition_monocle, cluster_seurat, ncol = 3)
proliferative_genes <- c("MKI67", "TOP2A", "TPX2", "PTTG1", "PCLAF", "RRM2")
proliferative_monocle_umap <- plot_cells(cds, genes = proliferative_genes,
show_trajectory_graph= TRUE,
label_branch_points = FALSE,
label_leaves = FALSE,
label_roots = FALSE,
label_cell_groups=FALSE,
label_groups_by_cluster = FALSE)
# Use shiny app to select node closest to proliferative cells
cds <- order_cells(cds)
# Plot pseudotime values over UMAP
pseudotime_plot <- plot_cells(cds, color_cells_by = "pseudotime",
show_trajectory_graph = TRUE,
label_cell_groups = FALSE,
label_leaves = FALSE,
label_branch_points = FALSE,
label_roots = FALSE) +
ggtitle("Clusters", subtitle = "Monocle 3 Trajectory Analysis")
pseudotime_plot
rajectory_pr_test_df <- graph_test(cds,
neighbor_graph="principal_graph",
cores=4)
trjaectory_pr_test_df <- trajectory_pr_test_df %>%
rownames_to_column(var = "gene_id")
trajectory_pr_test_df <- graph_test(cds,
neighbor_graph="principal_graph",
cores=4)
trjaectory_pr_test_df <- trajectory_pr_test_df %>%
rownames_to_column(var = "gene_id")
trajectory_pr_de_genes_df <- trjaectory_pr_test_df %>% filter(q_value < 0.05)
trajectory_pr_de_genes_df <- trajectory_pr_de_genes_df %>%
arrange(desc(abs(morans_I))) %>%
dplyr::select(gene_id, gene_short_name, status, everything())
trajectory_pr_de_genes_df
gene_module_df <- find_gene_modules(cds[trajectory_pr_de_genes_df$gene_id,],
reduction_method = "UMAP",
random_seed = 1, cores = 3,
resolution = 10^seq(-6, -1))
gene_module_df <- gene_module_df %>% arrange(supermodule, module)
gene_module_df
cell_group_df <- tibble::tibble(cell = rownames(colData(cds)),
cell_group = colData(cds)$cluster_identity)
agg_mat <- aggregate_gene_expression(cds, gene_module_df, cell_group_df)
row.names(agg_mat) <- stringr::str_c("Module ", row.names(agg_mat))
agg_mat <- as.matrix(agg_mat)
agg_mat <- scale(agg_mat)
cols = rev(colorRampPalette(RColorBrewer::brewer.pal(11,"RdYlBu"))(100))
breaks = seq(0, 1, length=101)
library(ComplexHeatmap)
heatmap <- Heatmap(agg_mat,
cluster_rows = function(m) hclust(dist(agg_mat), method = "ward.D2"),
row_names_gp = gpar(fontsize = 8),
col = cols)
heatmap
cds
cds@principal_graph_aux
cds <- readRDS("/Volumes/LACIE/RPE_scRNA/PUBLISHED/H9_RPE_Residual_Monocle3_Object.rds")
cds
cds@principal_graph_aux$UMAP
cds@principal_graph_aux$UMAP$root_pr_nodes
cds@principal_graph_aux$UMAP$pr_graph_cell_proj_closest_vertex
cds@principal_graph_aux$UMAP$root_pr_nodes
cds@principal_graph_aux$UMAP$history
cds@principal_graph_aux$UMAP$pr_graph_cell_proj_tree
