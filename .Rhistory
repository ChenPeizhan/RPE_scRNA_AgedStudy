library(Seurat)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggpubr)
# Load data into Seurat environment
input_dir <- "/Volumes/LACIE/RPE_scRNA/PUBLISHED/H9_RPE_AGGR/outs/filtered_feature_bc_matrix/"
data <- Read10X(input_dir)
seurat_obj <- CreateSeuratObject(data, project = "H9_RPE", assay = "RNA")
# Extract batch information from cell names
batch <- sapply(strsplit(Cells(seurat_obj), "-"), function(x) x[2])
age <- batch
age[which(batch == "1")] <- "YOUNG"
age[which(batch == "2")] <- "AGED"
age
table(age)
remove(data)
seurat_obj[["batch"]] <- batch
seurat_obj[["age"]] <- age
seurat_obj@meta.data
seurat_obj[["percent.mt"]] <- PercentageFeatureSet(seurat_obj, pattern = "^MT-")
seurat_obj[["percent.rb"]] <- PercentageFeatureSet(seurat_obj, pattern = "^RPS|^RPL")
saveRDS(seurat_obj, "/Volumes/LACIE/RPE_scRNA/PUBLISHED/H9_RPE_SeuratObj.rds")
young_obj <- subset(seurat_obj, age == "YOUNG")
aged_obj <- subset(seurat_obj, age == "AGED")
saveRDS(young_obj, "/Volumes/LACIE/RPE_scRNA/PUBLISHED/H9_RPE_YOUNG_SeuratObj.rds")
saveRDS(aged_obj, "/Volumes/LACIE/RPE_scRNA/PUBLISHED/H9_RPE_AGED_SeuratObj.rds")
young_obj@meta.data
young_obj@meta.data[1:10,]
# Extract QC metrics from metadata
young_df <- FetchData(young_obj, vars = c("batch", "age", "nCount_RNA",
"nFeature_RNA", "percent.mt",
"percent.rb"))
aged_df <- FetchData(aged_obj, vars = c("batch", "age", "nCount_RNA",
"nFeature_RNA", "percent.mt",
"percent.rb"))
young_umi_plot <- ggplot(young_df, aes(y = nCount_RNA)) + geom_histogram
young_umi_plot <- ggplot(young_df, aes(y = nCount_RNA)) + geom_histogram()
young_umi_plot
young_umi_plot <- ggplot(young_df, aes(nCount_RNA)) + geom_histogram()
young_umi_plot
young_umi_plot <- ggplot(young_df, aes(nCount_RNA)) + geom_histogram(binwidth = 100)
young_umi_plot
young_umi_plot <- ggplot(young_df, aes(nCount_RNA)) + geom_histogram(binwidth = 1000)
young_umi_plot
young_umi_plot <- ggplot(young_df, aes(nCount_RNA)) + geom_histogram(binwidth = 500)
young_umi_plot
young_umi_plot <- ggplot(young_df, aes(nCount_RNA)) + geom_histogram(binwidth = 500) + theme_classic2()
young_umi_plot
young_umi_plot <- ggplot(young_df, aes(nCount_RNA)) + geom_histogram(binwidth = 500) + theme_classic()
young_umi_plot
young_umi_plot <- ggplot(young_df, aes(nCount_RNA)) + geom_histogram(binwidth = 500, aes(colour = "black", fill = "gray23")) + theme_classic()
young_umi_plot
young_umi_plot <- ggplot(young_df, aes(nCount_RNA)) + geom_histogram(binwidth = 500, colour = "black", fill = "gray23") + theme_classic()
young_umi_plot
young_umi_plot <- ggplot(young_df, aes(nCount_RNA)) + geom_histogram(binwidth = 250, colour = "black", fill = "gray23") + theme_classic()
young_umi_plot
young_umi_plot <- ggplot(young_df, aes(nCount_RNA)) + geom_histogram(binwidth = 100, colour = "black", fill = "gray23") + theme_classic()
young_umi_plot
input_dir <- "/Volumes/LACIE/RPE_scRNA/PUBLISHED/H9_RPE_AGED/outs/filtered_feature_bc_matrix/"
data <- Read10X(input_dir)
library(Seurat)
library(tidyr)
library(dplyr)
library(ggplot2)
input_dir <- "/Volumes/LACIE/RPE_scRNA/PUBLISHED/H9_RPE_AGED/outs/filtered_feature_bc_matrix/"
data <- Read10X(input_dir)
input_dir <- "/Volumes/LACIE/RPE_scRNA/PUBLISHED/H9_RPE_AGED/outs/filtered_feature_bc_matrix/"
data <- Read10X(input_dir)
seurat_obj <- CreateSeuratObject(data, project = "RPE_scRNA")
# Add metadata
seurat_obj[["condition"]] <- "Aged"
seurat_obj[["percent.mt"]] <- PercentageFeatureSet(seurat_obj, pattern = "^MT-")
seurat_obj[["percent.rb"]] <- PercentageFeatureSet(seurat_obj, pattern = "^RPS|^RPL")
#saveRDS(seurat_obj, "/Volumes/LACIE/RPE_scRNA/RPE_scRNA_AgedObject.rds")
calcThreshold <- function(x,
nmads = 3,
type = c("both", "lower", "upper"),
na.rm = FALSE){
med_val <- stats::median(x, na.rm = na.rm)
mad_val <- stats::mad(x, center = med_val, na.rm = na.rm)
upper_limit <- med_val + nmads * mad_val
lower_limit <- med_val - nmads * mad_val
if (type == "lower"){
return(lower_limit)
} else if (type == "upper") {
return(upper_limit)
} else(
return(list(lower_limit, upper_limit))
)
}
#Extract metadata with QC information
metadata <- seurat_obj@meta.data
# Use function to calculate 3 MAD
nCount_lower_threshold <- calcThreshold(log10(metadata$nCount_RNA), nmads = 3, type = "lower")
nCount_upper_threshold <- calcThreshold(log10(metadata$nCount_RNA), nmads = 3, type = "upper")
# Convert to original value (unlog scale)
nCount_lower_threshold <- 10^(nCount_lower_threshold)
nCount_upper_threshold <- 10^(nCount_upper_threshold)
# Generate plots
ncount_hist <- ggplot(metadata, aes(nCount_RNA)) + geom_histogram(bins = 100) +
theme_bw() + geom_vline(xintercept = nCount_lower_threshold, color = "red") +
geom_vline(xintercept = nCount_upper_threshold, color = "red") + ggtitle("RPE_scRNA - Aged", subtitle = "Total UMIs per cell") +
xlab("Total UMIs per cell") + ylab("Number of cells")
nfeature_hist <- ggplot(metadata, aes(nFeature_RNA)) + geom_histogram(bins = 100) +
theme_bw() + geom_vline(xintercept = 220, color = "red") + ggtitle("RPE_scRNA - Aged", subtitle = "Total genes per cell") +
xlab("Total genes per cell") + ylab("Number of cells")
mt_hist <- ggplot(metadata, aes(percent.mt)) + geom_histogram(bins = 100) +
theme_bw() + geom_vline(xintercept = 25, color = "red") + ggtitle("RPE_scRNA - Aged", subtitle = "Mitochondrial expression") +
xlab("% Mitochondrial expression") + ylab("Number of cells")
rb_hist <- ggplot(metadata, aes(percent.rb)) + geom_histogram(bins = 100) +
theme_bw() + geom_vline(xintercept = 60, color = "red") + ggtitle("RPE_scRNA - Aged", subtitle = "Ribosomal expression") +
xlab("% Ribosomal expression") + ylab("Number of cells")
# Original number of cells
ncells1 <- ncol(seurat_obj)
# Filter poor quality cells from dataset
seurat_obj <- subset(seurat_obj, nCount_RNA > nCount_lower_threshold &
nCount_RNA < nCount_upper_threshold &
nFeature_RNA > 220 &
percent.mt < 25 &
percent.rb < 60)
ncells2 <- ncol(seurat_obj)
ncelldiff <- ncells1 - ncells2
print(sprintf("%d cells filtered from dataset.", ncelldiff))
seurat_obj <- SCTransform(seurat_obj,
vars.to.regress = c("percent.mt", "percent.rb"),
conserve.memory = TRUE, verbose = FALSE)
count_matrix <- seurat_obj[["RNA"]]@counts
count_matrix <- as.matrix(count_matrix)
write.table(count_matrix, "H9_RPE_AGED_RawCountMatrix.tsv", sep = "\t")
remove(count_matrix)
norm_matrix <- seurat_obj[["SCT"]]@counts
norm_matrix <- as.matrix(norm_matrix)
write.table(norm_matrix, "H9_RPE_AGED_NormalisedCountMatrix.tsv", sep = "\t")
library(Seurat)
library(tidyr)
library(dplyr)
library(ggplot2)
input_dir <- "/Volumes/LACIE/RPE_scRNA/PUBLISHED/H9_RPE_AGED/outs/filtered_feature_bc_matrix/"
data <- Read10X(input_dir)
seurat_obj <- CreateSeuratObject(data, project = "RPE_scRNA")
# Add metadata
seurat_obj[["condition"]] <- "Aged"
seurat_obj[["percent.mt"]] <- PercentageFeatureSet(seurat_obj, pattern = "^MT-")
seurat_obj[["percent.rb"]] <- PercentageFeatureSet(seurat_obj, pattern = "^RPS|^RPL")
calcThreshold <- function(x,
nmads = 3,
type = c("both", "lower", "upper"),
na.rm = FALSE){
med_val <- stats::median(x, na.rm = na.rm)
mad_val <- stats::mad(x, center = med_val, na.rm = na.rm)
upper_limit <- med_val + nmads * mad_val
lower_limit <- med_val - nmads * mad_val
if (type == "lower"){
return(lower_limit)
} else if (type == "upper") {
return(upper_limit)
} else(
return(list(lower_limit, upper_limit))
)
}
#Extract metadata with QC information
metadata <- seurat_obj@meta.data
# Use function to calculate 3 MAD
nCount_lower_threshold <- calcThreshold(log10(metadata$nCount_RNA), nmads = 3, type = "lower")
nCount_upper_threshold <- calcThreshold(log10(metadata$nCount_RNA), nmads = 3, type = "upper")
# Convert to original value (unlog scale)
nCount_lower_threshold <- 10^(nCount_lower_threshold)
nCount_upper_threshold <- 10^(nCount_upper_threshold)
# Generate plots
ncount_hist <- ggplot(metadata, aes(nCount_RNA)) + geom_histogram(bins = 100) +
theme_bw() + geom_vline(xintercept = nCount_lower_threshold, color = "red") +
geom_vline(xintercept = nCount_upper_threshold, color = "red") + ggtitle("RPE_scRNA - Aged", subtitle = "Total UMIs per cell") +
xlab("Total UMIs per cell") + ylab("Number of cells")
nfeature_hist <- ggplot(metadata, aes(nFeature_RNA)) + geom_histogram(bins = 100) +
theme_bw() + geom_vline(xintercept = 220, color = "red") + ggtitle("RPE_scRNA - Aged", subtitle = "Total genes per cell") +
xlab("Total genes per cell") + ylab("Number of cells")
mt_hist <- ggplot(metadata, aes(percent.mt)) + geom_histogram(bins = 100) +
theme_bw() + geom_vline(xintercept = 25, color = "red") + ggtitle("RPE_scRNA - Aged", subtitle = "Mitochondrial expression") +
xlab("% Mitochondrial expression") + ylab("Number of cells")
rb_hist <- ggplot(metadata, aes(percent.rb)) + geom_histogram(bins = 100) +
theme_bw() + geom_vline(xintercept = 60, color = "red") + ggtitle("RPE_scRNA - Aged", subtitle = "Ribosomal expression") +
xlab("% Ribosomal expression") + ylab("Number of cells")
# Original number of cells
ncells1 <- ncol(seurat_obj)
# Filter poor quality cells from dataset
seurat_obj <- subset(seurat_obj, nCount_RNA > nCount_lower_threshold &
nCount_RNA < nCount_upper_threshold &
nFeature_RNA > 220 &
percent.mt < 25 &
percent.rb < 60)
ncells2 <- ncol(seurat_obj)
ncelldiff <- ncells1 - ncells2
print(sprintf("%d cells filtered from dataset.", ncelldiff))
seurat_obj <- SCTransform(seurat_obj,
vars.to.regress = c("percent.mt", "percent.rb"),
conserve.memory = TRUE, verbose = FALSE)
# Principal component analysis
seurat_obj <- RunPCA(seurat_obj, verbose = FALSE)
# UMAP
seurat_obj <- RunUMAP(seurat_obj, dims = 1:30, umap.method = "uwot")
remove(data)
seurat_obj <- FindNeighbors(seurat_obj, dims = 1:30)
windows <- c(seq(0, 1.5, by = 0.1))
for (res in windows){
seurat_obj <- FindClusters(seurat_obj, resolution = res, verbose = FALSE)
}
library(clustree)
clustree_plot <- clustree(seurat_obj, prefix = "SCT_snn_res.")
clustree_plot
clustree_plot
metadata <- FetchData(seurat_obj, vars = c("seurat_clusters", "SCT_snn_res.1.2"))
res_counts <- as.data.frame(table(metadata$SCT_snn_res.1.2))
res_hist <- ggplot(res_counts, aes(x = Var1, y = Freq)) + geom_bar(stat = "identity")
res_hist
metadata <- FetchData(seurat_obj, vars = c("seurat_clusters", "SCT_snn_res.0.7"))
res_counts <- as.data.frame(table(metadata$SCT_snn_res.1.2))
res_hist <- ggplot(res_counts, aes(x = Var1, y = Freq)) + geom_bar(stat = "identity")
res_hist
metadata <- FetchData(seurat_obj, vars = c("seurat_clusters", "SCT_snn_res.0.7"))
res_counts <- as.data.frame(table(metadata$SCT_snn_res.0.7))
res_hist <- ggplot(res_counts, aes(x = Var1, y = Freq)) + geom_bar(stat = "identity")
res_hist
input_dir <- "/Volumes/LACIE/RPE_scRNA/PUBLISHED/H9_RPE_YOUNG/outs/filtered_feature_bc_matrix/"
data <- Read10X(input_dir)
seurat_obj <- CreateSeuratObject(data, project = "RPE_scRNA")
# Add metadata
seurat_obj[["condition"]] <- "Control"
seurat_obj[["percent.mt"]] <- PercentageFeatureSet(seurat_obj, pattern = "^MT-")
seurat_obj[["percent.rb"]] <- PercentageFeatureSet(seurat_obj, pattern = "^RPS|^RPL")
# Retrieve values to plot from the Seurat object
metadata <- seurat_obj@meta.data
print(metadata[1:10,])
calcThreshold <- function(x,
nmads = 3,
type = c("both", "lower", "upper"),
na.rm = FALSE){
med_val <- stats::median(x, na.rm = na.rm)
mad_val <- stats::mad(x, center = med_val, na.rm = na.rm)
upper_limit <- med_val + nmads * mad_val
lower_limit <- med_val - nmads * mad_val
if (type == "lower"){
return(lower_limit)
} else if (type == "upper") {
return(upper_limit)
} else(
return(list(lower_limit, upper_limit))
)
}
# Use function to calculate 3 MAD
nCount_lower_threshold <- calcThreshold(log10(metadata$nCount_RNA), nmads = 3, type = "lower")
nCount_upper_threshold <- calcThreshold(log10(metadata$nCount_RNA), nmads = 3, type = "upper")
# Convert to original value (unlog scale)
nCount_lower_threshold <- 10^(nCount_lower_threshold)
nCount_upper_threshold <- 10^(nCount_upper_threshold)
# Generate plots
ncount_hist <- ggplot(metadata, aes(nCount_RNA)) + geom_histogram(bins = 100) +
theme_bw() + geom_vline(xintercept = nCount_lower_threshold, color = "red") +
geom_vline(xintercept = nCount_upper_threshold, color = "red") + ggtitle("RPE_scRNA - Control", subtitle = "Total UMIs per cell") +
xlab("Total UMIs per cell") + ylab("Number of cells")
nfeature_hist <- ggplot(metadata, aes(nFeature_RNA)) + geom_histogram(bins = 100) +
theme_bw() + geom_vline(xintercept = 220, color = "red") + ggtitle("RPE_scRNA - Control", subtitle = "Total genes per cell") +
xlab("Total genes per cell") + ylab("Number of cells")
mt_hist <- ggplot(metadata, aes(percent.mt)) + geom_histogram(bins = 100) +
theme_bw() + geom_vline(xintercept = 25, color = "red") + ggtitle("RPE_scRNA - Control", subtitle = "Mitochondrial expression") +
xlab("% Mitochondrial expression") + ylab("Number of cells")
rb_hist <- ggplot(metadata, aes(percent.rb)) + geom_histogram(bins = 100) +
theme_bw() + geom_vline(xintercept = 60, color = "red") + ggtitle("RPE_scRNA - Control", subtitle = "Ribosomal expression") +
xlab("% Ribosomal expression") + ylab("Number of cells")
# Original number of cells
ncells1 <- ncol(seurat_obj)
# Filter poor quality cells from dataset
seurat_obj <- subset(seurat_obj, nCount_RNA > nCount_lower_threshold &
nCount_RNA < nCount_upper_threshold &
nFeature_RNA > 220 &
percent.mt < 25 &
percent.rb < 60)
ncells2 <- ncol(seurat_obj)
ncelldiff <- ncells1 - ncells2
print(sprintf("%d cells filtered from dataset.", ncelldiff))
seurat_obj <- SCTransform(seurat_obj,
vars.to.regress = c("percent.mt", "percent.rb"),
conserve.memory = TRUE, verbose = FALSE)
# Principal component analysis
seurat_obj <- RunPCA(seurat_obj, verbose = FALSE)
# UMAP
seurat_obj <- RunUMAP(seurat_obj, dims = 1:30, umap.method = "uwot")
seurat_obj <- FindNeighbors(seurat_obj, dims = 1:30)
windows <- c(seq(0, 1.7, by = 0.1))
for (res in windows){
seurat_obj <- FindClusters(seurat_obj, resolution = res, verbose = FALSE)
}
library(clustree)
clustree_plot <- clustree(seurat_obj, prefix = "SCT_snn_res.")
clustree_plot
metadata <- FetchData(seurat_obj, vars = c("seurat_clusters", "SCT_snn_res.0.6"))
res_counts <- as.data.frame(table(metadata$SCT_snn_res.0.6))
res_hist <- ggplot(res_counts, aes(x = Var1, y = Freq)) + geom_bar(stat = "identity")
res_hist
metadata <- FetchData(seurat_obj, vars = c("seurat_clusters", "SCT_snn_res.0.6"))
res_counts <- as.data.frame(table(metadata$SCT_snn_res.0.6))
res_hist <- ggplot(res_counts, aes(x = Var1, y = Freq)) + geom_bar(stat = "identity")
res_hist
# Load objects
control_obj <- readRDS("/Volumes/LACIE/RPE_scRNA/RPE_scRNA_Control_Analysed_Object.rds")
aged_obj <- readRDS("/Volumes/LACIE/RPE_scRNA/RPE_scRNA_Aged_Analysed_Object.rds")
# Set resolution
control_obj[["seurat_clusters"]] <- control_obj[["SCT_snn_res.0.6"]]
Idents(control_obj) <- "seurat_clusters"
aged_obj[["seurat_clusters"]] <- aged_obj[["SCT_snn_res.0.7"]]
Idents(aged_obj) <- "seurat_clusters"
#saveRDS(control_obj, "/Volumes/LACIE/RPE_scRNA/RPE_scRNA_Control_Analysed_Object.rds")
#saveRDS(aged_obj, "/Volumes/LACIE/RPE_scRNA/RPE_scRNA_Aged_Analysed_Object.rds")
